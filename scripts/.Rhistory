shiny::runApp()
runApp()
runApp()
# Read in data
df <- read.csv('../data/bechdel_data.csv', stringsAsFactors = FALSE)
# Read in data
df <- read.csv('/data/bechdel_data.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/web-materials/exercise-1")
# Read in data
df <- read.csv('data/bechdel_data.csv', stringsAsFactors = FALSE)
View(df)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
runApp()
styler:::style_active_file()
runApp()
runApp()
library(shiny)
runApp()
runApp('C:/Users/chris/Desktop/School/INFO201/ch16-shiny/exercise-5')
runApp()
runApp()
runApp()
?mainPanel
runApp()
runApp()
runApp()
# server.R
library(dplyr)
library(shiny)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
output$scatter <- renderPlotly({
return(build_scatter(joined_data, input$search))
})
})
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == "False") %>%
filter(ratings_disabled == "False") %>%
filter(video_error_or_removed == "False") %>%
select(
video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link
)
# Change the format of date
new_data$trending_date <- paste0("20", new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Append rating (likes to total number of ratings)
new_data <- new_data %>%
mutate("rating" = likes / (likes + dislikes) * 10) %>%
filter(rating < 10) %>%
rename(comments = comment_count)
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == "False") %>%
filter(ratings_disabled == "False") %>%
filter(video_error_or_removed == "False") %>%
select(
video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link
)
# Change the format of date
new_data$trending_date <- paste0("20", new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Append rating (likes to total number of ratings)
new_data <- new_data %>%
mutate("rating" = likes / (likes + dislikes) * 10) %>%
filter(rating < 10) %>%
rename(comments = comment_count)
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
# testing
new_data <- read.csv('data/new_data.csv')
new_data %>% mutate_if(is.factor, as.character) -> new_data
my_data <- new_data
xvar <- c(as.Date("2017-11-30"), as.Date("2018-01-01"))
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data,
x = ~ trending_date, y = ~ video,
type = "scatter", name = line_one, mode = "line"
)
# draw out the rest of the lines based on other categories
for (i in 1:(length(yvar) - 1)) {
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis <- data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(
title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Number of Videos")
)
my_line
runApp('C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis')
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == "False") %>%
filter(ratings_disabled == "False") %>%
filter(video_error_or_removed == "False") %>%
select(
video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link
)
# Change the format of date
new_data$trending_date <- paste0("20", new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Append rating (likes to total number of ratings)
new_data <- new_data %>%
mutate("rating" = likes / (likes + dislikes) * 10) %>%
filter(rating < 10) %>%
rename(comments = comment_count)
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == "False") %>%
filter(ratings_disabled == "False") %>%
filter(video_error_or_removed == "False") %>%
select(
video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link
)
# Change the format of date
new_data$trending_date <- paste0("20", new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Append rating (likes to total number of ratings)
new_data <- new_data %>%
mutate("rating" = (likes / (likes + dislikes) * 10)) %>%
filter(rating < 10) %>%
rename(comments = comment_count)
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
View(new_data)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
