# Build Scatter file: function that returns a plotly Scatter plot
library(plotly)
library(stringr)
source("analysis.R")
data2 <- read.csv("../data/scatterstats.csv", stringsAsFactors = FALSE)
data2 <- data2 %>%
filter(Avg.Likes < 500000)
### Build Scatter ###
# xvar = input
build_scatter <- function(data, search = "", search2 = "", xvar, unique = FALSE) {
# Get x and y max
data <- data %>%
filter(grepl(search, "channel_title") | grepl(search2, "channel_title"))
xmax <- max(data[, xvar]) * 1.2
ymax <- max(data[,"Frequency"]) * 1.2
colorscale <- data[, "Main.Category"]
# Plot data
plot_ly(type = "scatter",
x = data[, xvar],
y = data[, "Frequency"],
mode = "markers",
color = colorscale,
colors = "Set1",
marker = list(
opacity = 1,
size = 7.5
)) %>%
layout(xaxis = list(range = c(0, xmax), title = toupper(xvar)),
yaxis = list(range = c(0, ymax), title = "Frequency")
) %>%
return()
}
build_scatter(data2, "", "", "Avg.Likes", FALSE)
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
source('C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts/build_scatter.R')
# Build Scatter file: function that returns a plotly Scatter plot
library(plotly)
library(stringr)
source("analysis.R")
data2 <- read.csv("../data/scatterstats.csv", stringsAsFactors = FALSE)
data2 <- data2 %>%
filter(Avg.Likes < 500000)
### Build Scatter ###
# xvar = input
build_scatter <- function(data, search = "", search2 = "", xvar, unique = FALSE) {
# Get x and y max
data <- data %>%
filter(grepl(search, "channel_title") | grepl(search2, "channel_title"))
xmax <- max(data[, xvar]) * 1.2
ymax <- max(data[,"Frequency"]) * 1.2
colorscale <- data[, "Main.Category"]
# Plot data
plot_ly(type = "scatter",
x = data[, xvar],
y = data[, "Frequency"],
mode = "markers",
color = colorscale,
colors = "Set1",
marker = list(
opacity = 1,
size = 7.5
)) %>%
layout(xaxis = list(range = c(0, xmax), title = toupper(xvar)),
yaxis = list(range = c(0, ymax), title = "Frequency")
) %>%
return()
}
build_scatter(data2, "", "", "Avg.Likes", FALSE)
shiny::runApp('C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis')
shiny::runApp()
shiny::runApp()
# server.R
library(dplyr)
library(shiny)
library(plotly)
library(ggplot2)
library(shinythemes)
library(jsonlite)
library(httr)
# Read in filtered data
new_data <- read.csv('data/new_data.csv')
new_data %>% mutate_if(is.factor, as.character) -> new_data
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Source the graphs and plots to be used as outputs for the application
source("scripts/build_line.R")
source("scripts/channel_compare.R")
source("scripts/cloud.R")
# Start shiny server
shinyServer(function(input, output) {
output$line <- renderPlotly(
return(build_line(new_data, input$date.range, input$cat.line))
)
output$bar <- renderPlotly(
return(build_bar(new_data, input$yvar, input$cat.bar))
)
output$cloud <- renderPlot(
return(build_cloud(new_data, input$category))
)
})
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis")
# server.R
library(dplyr)
library(shiny)
library(plotly)
library(ggplot2)
library(shinythemes)
library(jsonlite)
library(httr)
# Read in filtered data
new_data <- read.csv('data/new_data.csv')
new_data %>% mutate_if(is.factor, as.character) -> new_data
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Source the graphs and plots to be used as outputs for the application
source("scripts/build_line.R")
source("scripts/channel_compare.R")
source("scripts/cloud.R")
# Start shiny server
shinyServer(function(input, output) {
output$line <- renderPlotly(
return(build_line(new_data, input$date.range, input$cat.line))
)
output$bar <- renderPlotly(
return(build_bar(new_data, input$yvar, input$cat.bar))
)
output$cloud <- renderPlot(
return(build_cloud(new_data, input$category))
)
})
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
View(data)
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
View(data)
data
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
