data <- data %>%
mutate(as.name(paste0("video", get(i))) = new_data$video)
data <- data %>%
mutate(col_name = new_data$video)
View(data)
data <- data %>%
mutate(get(col_name) = new_data$video)
?mutate_each
data <- data %>%
mutate_("col_name = new_data$video")
View(data)
data <- data %>%
mutate_(col_name = new_data$video)
data <- data %>%
mutate(get(col_name, envir=as.environment(data)) = new_data$video)
data <- data %>%
mutate((!!col_name) = new_data$video)
data <- data %>%
mutate(!!(col_name) = new_data$video)
data <- data %>%
mutate(UQ(col_name) = new_data$video)
data <- data %>%
mutate(!!col_name := new_data$video)
View(data)
my_line <- my_line %>%
add_trace(y = ~col_name, type = "scatter", mode = "line")
View(data)
my_line <- my_line %>%
add_trace(y = ~!!col_name, type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", get(i))
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = ~!!col_name, type = "scatter", mode = "line")
}
col_name <- paste0("video", !!i)
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", !!i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = ~!!col_name, type = "scatter", mode = "line")
}
my_line
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", !!i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
}
my_line
View(my_data)
View(data)
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter based on category checkboxes
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", !!i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
}
View(new_data)
#testing
my_data <- new_data
#testing
my_data <- new_data
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
#testing
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter based on category checkboxes
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", !!i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
}
my_line
View(data)
y = col_name
col_name <- paste0("video", i)
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter based on category checkboxes
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
}
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
library(dplyr)
library(plotly)
library(lubridate)
source("analysis.R")
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter based on category checkboxes
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, type = "scatter", mode = "line")
}
my_line
View(data)
y = col_name
line_name <- yvar[[i]]
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, mode = "line")
}
my_line
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = ~category, mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, mode = "line")
}
my_line
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
library(dplyr)
library(plotly)
library(lubridate)
source("analysis.R")
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter based on category checkboxes
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = ~category, mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, mode = "line")
}
my_line
line_one <- yvar[[length(yvar)]]
# data_2 <- filter(my_data, category == "People & Blogs") %>%
#   group_by(trending_date) %>%
#   summarize(video_2 = length(video_id))
#
#   data <- data %>%
#     mutate(video_2 = data_2$video_2)
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, mode = "line")
}
my_line
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
my_line
View(my_line)
View(data)
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, mode = "line")
}
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
my_line <- my_line %>%
add_trace(y = col_name, name = line_name, type = "scatter", mode = "line")
}
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
