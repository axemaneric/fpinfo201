select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
View(data)
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
View(data)
data
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis/scripts")
library(dplyr)
library(jsonlite)
library(httr)
# Convert JSON into data frame (Category ID to Category conversion)
data <- fromJSON("../data/US_category_id.json")
data <- flatten(data[["items"]]) %>%
select(id, snippet.title) %>%
rename(category_id = id, category = snippet.title)
# Convert category id from char to int
data$category_id <- as.integer(data$category_id)
# Read in data of Top 200 US Videos
US_videos <- read.csv("../data/USvideos.csv", stringsAsFactors = FALSE)
# Join `US_videos` with `data` by category id. Adds categories to the videos
new_data <- left_join(US_videos, data, by = "category_id")
# Filter out videos we can't use (videos without comments, ratings, or deleted videos)
# Select only columns that we need
new_data <- new_data %>%
filter(comments_disabled == 'False') %>%
filter(ratings_disabled == 'False') %>%
filter(video_error_or_removed == 'False') %>%
select(video_id, trending_date, title, channel_title, category, tags,
views, likes, dislikes, comment_count, thumbnail_link)
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Write new_data to data folder
write.csv(new_data, "../data/new_data.csv")
# server.R
library(dplyr)
library(shiny)
library(plotly)
library(ggplot2)
library(shinythemes)
library(jsonlite)
library(httr)
# Read in filtered data
new_data <- read.csv('data/new_data.csv')
new_data %>% mutate_if(is.factor, as.character) -> new_data
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Source the graphs and plots to be used as outputs for the application
source("scripts/build_line.R")
source("scripts/channel_compare.R")
source("scripts/cloud.R")
# Start shiny server
shinyServer(function(input, output) {
output$line <- renderPlotly(
return(build_line(new_data, input$date.range, input$cat.line))
)
output$bar <- renderPlotly(
return(build_bar(new_data, input$yvar, input$cat.bar))
)
output$cloud <- renderPlot(
return(build_cloud(new_data, input$category))
)
})
setwd("C:/Users/chris/Desktop/School/INFO201/yt-trending-data-analysis")
# server.R
library(dplyr)
library(shiny)
library(plotly)
library(ggplot2)
library(shinythemes)
library(jsonlite)
library(httr)
# Read in filtered data
new_data <- read.csv('data/new_data.csv')
new_data %>% mutate_if(is.factor, as.character) -> new_data
# Split the tags into a list
new_data$tags <- as.list(strsplit(new_data$tags, "|", fixed = T))
# Change the format of date
new_data$trending_date <- paste0("20",new_data$trending_date)
new_data$trending_date <- as.Date(new_data$trending_date, "%Y.%d.%m")
# Source the graphs and plots to be used as outputs for the application
source("scripts/build_line.R")
source("scripts/channel_compare.R")
source("scripts/cloud.R")
# Start shiny server
shinyServer(function(input, output) {
output$line <- renderPlotly(
return(build_line(new_data, input$date.range, input$cat.line))
)
output$bar <- renderPlotly(
return(build_bar(new_data, input$yvar, input$cat.bar))
)
output$cloud <- renderPlot(
return(build_cloud(new_data, input$category))
)
})
runApp()
runApp()
ata <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <-
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
library(dplyr)
library(plotly)
library(lubridate)
source("analysis.R")
build_line <- function(my_data, xvar, yvar){
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
}
build_line(new_data, list("2017-11-30", "2018-01-01"), list("Entertainment", "People & Blogs", "Sports"))
library(dplyr)
library(plotly)
library(lubridate)
source("analysis.R")
build_line <- function(my_data, xvar, yvar){
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
}
build_line(new_data, list("2017-11-30", "2018-01-01"), list("Entertainment", "People & Blogs", "Sports"))
library(dplyr)
library(plotly)
library(lubridate)
source("analysis.R")
build_line <- function(my_data, xvar, yvar){
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Number of Videos"))
my_line
}
build_line(new_data, list("2017-11-30", "2018-01-01"), list("Entertainment", "People & Blogs", "Sports"))
runApp()
build_line()
build_line()
build_line <- function(my_data, xvar, yvar){
#testing
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
}
build_line(new_data, list("2017-11-30", "2018-01-01"), list("Entertainment", "People & Blogs", "Sports"))
runApp()
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
library(dplyr)
library(plotly)
library(lubridate)
#testing
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
my_data <- new_data
xvar <- list("2017-11-30", "2018-01-01")
yvar <- list("Entertainment", "People & Blogs", "Sports")
# filter based on date slider
date_one <- as.Date(xvar[[1]])
date_two <- as.Date(xvar[[2]])
my_data <- my_data %>%
filter(trending_date > date_one & trending_date < date_two)
# filter out the data related to the last category in the list
data <- filter(my_data, category == yvar[[length(yvar)]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
line_one <- yvar[[length(yvar)]]
# draw out the first line based on the data
my_line <- plot_ly(data, x = ~trending_date, y = ~video,
type = "scatter", name = line_one, mode = "line")
# draw out the rest of the lines based on other categories
for (i in 1 : (length(yvar)-1)){
col_name <- paste0("video", i)
line_name <- yvar[[i]]
new_data <- filter(my_data, category == yvar[[i]]) %>%
group_by(trending_date) %>%
summarize(video = length(video_id))
data <- data %>%
mutate(!!col_name := new_data$video)
yaxis = data[[col_name]]
my_line <- my_line %>%
add_trace(y = yaxis, name = line_name, type = "scatter", mode = "line")
}
# formatting the line plot
my_line <- my_line %>%
layout(title = "Number of Trending Videos in Catogories Change in Time",
xaxis = list(title = "Date"),
yaxis = list (title = "Number of Videos"))
my_line
shiny::runApp()
runApp()
runApp()
runApp()
